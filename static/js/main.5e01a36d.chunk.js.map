{"version":3,"sources":["constants/api.js","helpers/getWeatherData/getWeatherData.js","components/Button/Button/Button.js","components/Button/Submit/SubmitButton.js","components/Input/Input.js","components/Form/Form.js","components/WeatherTemplate/WeatherTemplate.js","components/CurrentWeather/CurrentWeather.js","components/ThreeDayWeather/ThreeDayWeather.js","components/Button/ThreeDay/ShowThreeDayButton.js","components/WeatherResults/WeatherResults.js","components/WeatherApp/WeatherApp.js","App.js","serviceWorker.js","index.js"],"names":["API_KEY","API_URL","getCurrentWeather","queryString","a","Axios","get","data","console","log","currentWeather","getThreeDayWeather","locationId","list","day","zeroPrefix","val","Date","getDate","month","getMonth","year","getFullYear","fullDate","regex","RegExp","threeDayWeather","filter","weather","dt_txt","match","slice","Button","className","type","onClick","children","ButtonWrapper","styled","button","SubmitButton","setQueryString","setCurrentWeatherData","setError","handleOnSubmit","event","preventDefault","Input","onChange","placeholder","value","Form","FormWrapper","InputField","target","form","WeatherTemplate","component","title","temp","temp_min","temp_max","formatTemp","Math","round","Wrapper","Title","Temp","AverageTemp","div","p","CurrentWeather","currentWeatherData","name","main","ThreeDayWeather","threeDayWeatherData","days","map","i","today","getDay","weatherDay","ShowThreeDayButton","showThreeDays","setShowThreeDays","setThreeDayWeatherData","handleOnClick","WeatherResults","useState","id","data-testid","WeatherApp","error","Container","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5e01a36d.chunk.js","sourcesContent":["export const API_KEY = \"4bf52f7202535b5e20264ce550263b8d\";\nexport const API_URL = \"https://api.openweathermap.org/data/2.5/\";\n","import { API_KEY, API_URL } from \"../../constants/api\";\nimport Axios from \"axios\";\n\nconst getCurrentWeather = async queryString => {\n  let currentWeather;\n  try {\n    const { data } = await Axios.get(\n      `${API_URL}weather?q=${queryString}&units=metric&APPID=${API_KEY}`\n    );\n    console.log(data);\n    currentWeather = data;\n  } catch (err) {\n    currentWeather = null;\n  }\n\n  return currentWeather;\n};\n\nconst getThreeDayWeather = async locationId => {\n  let threeDayWeather;\n  try {\n    const {\n      data: { list }\n    } = await Axios.get(\n      `${API_URL}forecast?id=${locationId}&units=metric&appid=${API_KEY}`\n    );\n\n    const zeroPrefix = val => (val < 10 ? 0 + val : val);\n    const day = zeroPrefix(new Date().getDate());\n    const month = zeroPrefix(new Date().getMonth() + 1);\n    const year = new Date().getFullYear();\n    const fullDate = `${year}-${month}-${day}`;\n    const regex = new RegExp(fullDate, \"g\");\n\n    threeDayWeather = list\n      .filter(\n        weather =>\n          !weather.dt_txt.match(regex) && weather.dt_txt.match(/12:00:00/)\n      )\n      .slice(0, 3);\n  } catch (err) {\n    threeDayWeather = null;\n  }\n\n  return threeDayWeather;\n};\n\nexport { getCurrentWeather, getThreeDayWeather };\n","import React from \"react\";\nimport styled from \"styled-components\";\nconst Button = ({ className, type, onClick, children }) => {\n  return (\n    <ButtonWrapper className={className} type={type} onClick={onClick}>\n      {children}\n    </ButtonWrapper>\n  );\n};\n\nexport default Button;\n\nconst ButtonWrapper = styled.button`\n  display: block;\n  margin: 10px auto;\n  border: 1px solid #fff;\n  outline: 0;\n  background-color: black;\n  padding: 10px;\n  font-size: 15px;\n  cursor: pointer;\n  color: white;\n  font-weight: 600;\n`;\n","import React from \"react\";\n\nimport { getCurrentWeather } from \"../../../helpers/getWeatherData/index\";\nimport Button from \"../Button/Button\";\n\nconst SubmitButton = ({\n  queryString,\n  setQueryString,\n  setCurrentWeatherData,\n  setError\n}) => {\n  const handleOnSubmit = async event => {\n    event.preventDefault();\n\n    const data = await getCurrentWeather(queryString);\n\n    if (!data) {\n      setError(true);\n    } else {\n      setError(false);\n    }\n\n    setCurrentWeatherData(data);\n    setQueryString(\"\");\n  };\n\n  return (\n    <Button type=\"submit\" onClick={handleOnSubmit}>\n      SUBMIT\n    </Button>\n  );\n};\n\nexport default SubmitButton;\n","import React from \"react\";\n\nconst Input = ({ type, className, children, onChange, placeholder, value }) => {\n  return (\n    <input\n      className={className}\n      type={type}\n      onChange={onChange}\n      placeholder={placeholder}\n      value={value}\n    >\n      {children}\n    </input>\n  );\n};\n\nexport default Input;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport SubmitButton from \"../Button/Submit\";\nimport Input from \"../Input\";\n\nconst Form = ({\n  queryString,\n  setQueryString,\n  setCurrentWeatherData,\n  setError\n}) => {\n  return (\n    <FormWrapper>\n      <InputField\n        type=\"text\"\n        onChange={event => setQueryString(event.target.value)}\n        placeholder=\"Location\"\n        value={queryString}\n      />\n      <SubmitButton\n        queryString={queryString}\n        setQueryString={setQueryString}\n        setCurrentWeatherData={setCurrentWeatherData}\n        setError={setError}\n      />\n    </FormWrapper>\n  );\n};\n\nexport default Form;\n\nconst FormWrapper = styled.form`\n  background-color: navy;\n  padding: 50px;\n`;\n\nconst InputField = styled(Input)`\n  font-size: 23px;\n  font-weight: 50;\n  transition: width 0.5s ease-out;\n  height: 50px;\n  width: 250px;\n  border: none;\n  border-bottom: 5px solid #fff;\n  background-color: transparent;\n  color: #fff;\n  ::placeholder {\n    color: #fff;\n  }\n\n  :focus {\n    width: 35%;\n    outline: none;\n  }\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst WeatherTemplate = ({\n  className,\n  component,\n  title,\n  temp,\n  temp_min,\n  temp_max\n}) => {\n  const formatTemp = val => `${Math.round(val)}°c`;\n  return (\n    <Wrapper className={className} component={component}>\n      <Title component={component}>{title}</Title>\n      {component === \"current\" && <Temp>Lowest: {formatTemp(temp_min)}</Temp>}\n      <AverageTemp component={component}>{formatTemp(temp)}</AverageTemp>\n      {component === \"current\" && <Temp>Highest: {formatTemp(temp_max)}</Temp>}\n    </Wrapper>\n  );\n};\n\nexport default WeatherTemplate;\n\nconst Wrapper = styled.div`\n  display: inline-block;\n  padding: 20px;\n`;\nconst Title = styled.p`\n  color: ${({ component }) => (component === \"current\" ? \"blue\" : \"navy\")};\n  font-weight: 500;\n  margin: 0;\n  padding-top: 20px;\n  font-size: ${({ component }) => (component === \"current\" ? \"55px\" : \"35px\")};\n  text-transform: ${({ component }) => component === \"current\" && \"uppercase\"};\n`;\n\nconst Temp = styled.p`\n  display: inline-block;\n  padding: 0px 20px;\n  margin-bottom\n`;\n\nconst AverageTemp = styled.p`\n  font-size: 40px;\n  font-weight: ${({ component }) => component === \"current\" && \"600\"};\n  display: inline-block;\n`;\n","import React from \"react\";\nimport WeatherTemplate from \"../WeatherTemplate\";\n\nconst CurrentWeather = ({ currentWeatherData }) => {\n  const {\n    name,\n    main: { temp, temp_min, temp_max }\n  } = currentWeatherData;\n\n  return (\n    <WeatherTemplate\n      component=\"current\"\n      title={name}\n      temp={temp}\n      temp_min={temp_min}\n      temp_max={temp_max}\n    />\n  );\n};\n\nexport default CurrentWeather;\n","import React from \"react\";\n\nimport WeatherTemplate from \"../WeatherTemplate\";\nconst ThreeDayWeather = ({ threeDayWeatherData }) => {\n  const days = [\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n    \"Sunday\"\n  ];\n\n  return threeDayWeatherData.map((weather, i) => {\n    const today = new Date().getDay();\n    const dayIndex = today + i > 6 ? today + i - 7 : today + i;\n    const weatherDay = days[dayIndex];\n\n    return (\n      <WeatherTemplate\n        component=\"threeDay\"\n        title={weatherDay}\n        temp={weather.main.temp}\n      />\n    );\n  });\n};\n\nexport default ThreeDayWeather;\n","import React from \"react\";\n\nimport Button from \"../Button\";\nimport { getThreeDayWeather } from \"../../../helpers/getWeatherData/index\";\n\nconst ShowThreeDayButton = ({\n  locationId,\n  showThreeDays,\n  setShowThreeDays,\n  setThreeDayWeatherData\n}) => {\n  const handleOnClick = async () => {\n    const data = await getThreeDayWeather(locationId);\n\n    setThreeDayWeatherData(data);\n    setShowThreeDays(!showThreeDays);\n  };\n\n  return (\n    <Button type=\"text\" onClick={handleOnClick}>\n      Show 3 Day Forecast\n    </Button>\n  );\n};\n\nexport default ShowThreeDayButton;\n","import React, { useState } from \"react\";\nimport CurrentWeather from \"../CurrentWeather/CurrentWeather\";\nimport ThreeDayWeather from \"../ThreeDayWeather/ThreeDayWeather\";\nimport ShowThreeDayButton from \"../Button/ThreeDay/ShowThreeDayButton\";\n\nconst WeatherResults = ({ currentWeatherData }) => {\n  const [showThreeDays, setShowThreeDays] = useState(false);\n  const [threeDayWeatherData, setThreeDayWeatherData] = useState(null);\n\n  return (\n    <div>\n      <CurrentWeather currentWeatherData={currentWeatherData} />\n      <ShowThreeDayButton\n        locationId={currentWeatherData.id}\n        showThreeDays={showThreeDays}\n        setShowThreeDays={setShowThreeDays}\n        setThreeDayWeatherData={setThreeDayWeatherData}\n      />\n      {showThreeDays && (\n        <div data-testid=\"5dw\">\n          <ThreeDayWeather threeDayWeatherData={threeDayWeatherData} />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default WeatherResults;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport Form from \"../Form/Form\";\nimport WeatherResults from \"../WeatherResults/WeatherResults\";\n\nconst WeatherApp = () => {\n  const [queryString, setQueryString] = useState(\"\");\n  const [currentWeatherData, setCurrentWeatherData] = useState(null);\n  const [error, setError] = useState(false);\n\n  return (\n    <Container>\n      <Form\n        queryString={queryString}\n        setQueryString={setQueryString}\n        setCurrentWeatherData={setCurrentWeatherData}\n        setError={setError}\n      />\n      {error && <p>Enter a valid city</p>}\n      {currentWeatherData && (\n        <WeatherResults currentWeatherData={currentWeatherData} />\n      )}\n    </Container>\n  );\n};\n\nexport default WeatherApp;\n\nconst Container = styled.div`\n  text-align: center;\n`;\n","import React from \"react\";\nimport WeatherApp from \"./components/WeatherApp/WeatherApp\";\n\nconst App = () => <WeatherApp />;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}